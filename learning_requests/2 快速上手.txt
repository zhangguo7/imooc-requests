二、快速上手

1、发送请求
import requests
get 请求
r = requests.get('https://github.com/timeline.json')
post 请求
r = requests.post("http://httpbin.org/post")
put 请求
r = requests.put("http://httpbin.org/put")
delete 请求
r = requests.delete("http://httpbin.org/delete")
head 请求
r = requests.head("http://httpbin.org/get")
options 请求
r = requests.options("http://httpbin.org/get")

2、带参数的请求
用字典的键值对存放参数
payload = {'key1': 'value1', 'key2': 'value2'}
r = requests.get("http://httpbin.org/get", params=payload)

还可以将一个列表作为值传入
payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
r = requests.get('http://httpbin.org/get', params=payload)

3、响应内容
import requests
res = requests.get('https://github.com/timeline.json')

相应内容
res.text     Unicode型的数据
res.content  bytes型，即二进制的数据
注：读取文本使用res.text，读取二进制图片、文件，使用res.content

响应编码
res.encoding

4、json响应内容

5、原始响应内容
设置stream=True，获取来自服务器的套接字响应
以流下载的方式，将文件保存到文件
with open(filename, 'wb') as fd:
    for chunk in r.iter_content(chunk_size):
        fd.write(chunk)

6、定制请求头
url = 'https://api.github.com/some/endpoint'
headers = {'user-agent': 'my-app/0.0.1'}
r = requests.get(url, headers=headers)
注意: 1、定制 header 的优先级低于某些特定的信息源
         auth= 参数 .netrc headers
	  2、所有的header值必须是string、bytestring或者unicode
	  
7、更加复杂的POST请求
url = 'https://api.github.com/some/endpoint'
payload = {'some': 'data'}
r = requests.post(url, json=payload)
r = requests.post(url,data = json.dumps(payload))

8、POST一个多部分编码(Multipart-Encoded)的文件

9、响应状态码
res = requests.get('http://httpbin.org/get')
res.status_code
res.status_code == requests.codes.ok

通过Response.raise_for_status()来抛出错误请求的异常
当res.status_code = 200 时
r.raise_for_status() 返回None

10、响应头
res.headers
{
    'content-encoding': 'gzip',
    'transfer-encoding': 'chunked',
    'connection': 'close',
    'server': 'nginx/1.0.4',
    'x-runtime': '148ms',
    'etag': '"e1ca502697e5c9317743dc078f67693f"',
    'content-type': 'application/json'
}
仅为http头部而生，大小写不敏感
res.headers['Content-Type'] == res.headers['content-type']

11、Cookie
url = 'http://example.com/some/cookie/setting/url'
res = requests.get(url)
res.cookies['example_cookie_name']

12、重定向与请求历史
默认情况下，除了head请求，requests会自动重定向
使用res.history按照从最老到最近的请求进行排序
res = requests.get('http://github.com')
res.url
res.status_code
res.history

使用allow_redirects=False可以重定向
res = requests.get('http://github.com',allow_redirects=False)
res.status_code
res.history

使用head请求可以通过设置allow_redirects=False来进行重定向
res = requests.get('http://github.com',allow_redirects=True)

13、超时
通过timeout参数，设置等待请求反馈的时间
requests.get('http://github.com',timeout=0.01)
注:timeout 仅对连接过程有效，与响应体的下载无关。
   timeout 并不是整个下载响应的时间限制，而是
   如果服务器在timeout秒内没有应答，将会引发一个异常

14、错误与异常
遇到网络问题（如：DNS 查询失败、拒绝连接等）时，
Requests 会抛出一个 ConnectionError 异常。

如果 HTTP 请求返回了不成功的状态码，
Response.raise_for_status()会抛出一个HTTPError异常。

若请求超时，则抛出一个 Timeout 异常。

若请求超过了设定的最大重定向次数，
则会抛出一个 TooManyRedirects 异常。

所有Requests显式抛出的异常都继承自
requests.exceptions.RequestException




























